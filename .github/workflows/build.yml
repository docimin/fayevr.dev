name: Build and Push Next.js to Harbor

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    env: # Env variables needed during build
      NEXT_PUBLIC_DOMAIN_BACKEND: ${{secrets.NEXT_PUBLIC_DOMAIN_BACKEND}}
      NEXT_PUBLIC_PROJECT_ID: ${{secrets.NEXT_PUBLIC_PROJECT_ID}}
      API_KEY: ${{secrets.API_KEY}}

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js and install dependencies with pnpm
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install Dependencies
        run: |
          corepack enable
          pnpm install

      # Step 3: Build the Next.js project
      - name: Build Project
        run: pnpm build

      # Step 4: Prepare the Docker image
      - name: Log in to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: harbor.fayevr.dev
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          echo "FROM node:18-alpine" > Dockerfile
          echo "WORKDIR /app" >> Dockerfile
          echo "COPY .next /app/.next" >> Dockerfile
          echo "COPY package.json pnpm-lock.yaml /app/" >> Dockerfile
          echo "RUN npm install -g corepack && corepack enable && pnpm install --prod" >> Dockerfile
          echo "EXPOSE 3000" >> Dockerfile
          echo "CMD [\"pnpm\", \"start\"]" >> Dockerfile

          docker build -t harbor.fayevr.dev/fleet/fayevr.dev:latest .

      # Step 5: Push the Docker image to Harbor
      - name: Push Docker Image
        run: docker push harbor.fayevr.dev/fleet/fayevr.dev:latest
