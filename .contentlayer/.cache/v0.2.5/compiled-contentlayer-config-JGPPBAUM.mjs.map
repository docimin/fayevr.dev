{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\n  defineDocumentType,\n  defineNestedType,\n  makeSource,\n} from \"contentlayer/source-files\";\n\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport readingTime from \"reading-time\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\n\nexport const CloudinaryImage = defineNestedType(() => ({\n  name: \"CloudinaryImage\",\n  displayName: \"Cloudinary Image\",\n  fields: {\n    height: {\n      type: \"number\",\n      description: \"Height of the image\",\n      required: true,\n    },\n    width: {\n      type: \"number\",\n      description: \"Width of the image\",\n      required: true,\n    },\n    url: {\n      type: \"string\",\n      description: \"URL of the image\",\n      required: true,\n    },\n  },\n}));\n\nexport const Proof = defineNestedType(() => ({\n  name: \"Proof\",\n  displayName: \"Proof\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"Title of the proof\",\n      required: true,\n    },\n    url: {\n      type: \"string\",\n      description: \"URL to the proof\",\n      required: true,\n    },\n  },\n}));\n\nexport const Project = defineDocumentType(() => ({\n  name: \"Project\",\n  filePathPattern: \"projects/**/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    name: {\n      type: \"string\",\n      description: \"The name of the project\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      description: \"The description of the project\",\n      required: true,\n    },\n    link: {\n      type: \"string\",\n      description: \"The link to the project's page\",\n      required: false,\n    },\n    githubLink: {\n      type: \"string\",\n      description: \"The link to the project's github page\",\n      required: false,\n    },\n    iconName: {\n      type: \"string\",\n      description: \"The name of the icon to use\",\n      required: true,\n    },\n    image: {\n      type: \"nested\",\n      description: \"Image for the project\",\n      of: CloudinaryImage,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: doc => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n    },\n  },\n}));\n\nexport const BlogPost = defineDocumentType(() => ({\n  name: \"BlogPost\",\n  filePathPattern: \"blog/**/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the blog post\",\n      required: true,\n    },\n    date: {\n      type: \"string\",\n      description: \"The date of the blog post\",\n      required: true,\n    },\n    cannonicalURL: {\n      type: \"string\",\n      description: \"The link to the blog post\",\n      required: false,\n    },\n    image: {\n      type: \"nested\",\n      description: \"Image for the blog post\",\n      of: CloudinaryImage,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: doc => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n    },\n    dateUpdated: {\n      type: \"string\",\n      resolve: () => new Date().toDateString(),\n    },\n    readingTime: {\n      type: \"json\",\n      resolve: doc => readingTime(doc.body.raw),\n    },\n    wordCount: {\n      type: \"number\",\n      resolve: doc => doc.body.raw.split(/\\s+/gu).length,\n    },\n  },\n}));\n\nexport const Achievement = defineDocumentType(() => ({\n  name: \"Achievement\",\n  filePathPattern: \"achievements/**/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the achievement\",\n      required: true,\n    },\n    date: {\n      type: \"date\",\n      description: \"The date when the achievement was achieved\",\n      required: false,\n    },\n    prizeValue: {\n      type: \"string\",\n      description: \"The value of the prize\",\n      required: false,\n    },\n    proof: {\n      type: \"nested\",\n      of: Proof,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: doc => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"data\",\n  documentTypes: [Project, BlogPost, Achievement],\n  mdx: {\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypePrettyCode,\n        {\n          theme: \"github-dark\",\n          onVisitLine(node) {\n            // Prevent lines from collapsing in `display: grid` mode, and\n            // allow empty lines to be copy/pasted\n            if (node.children.length === 0) {\n              node.children = [{ type: \"text\", value: \" \" }];\n            }\n          },\n        },\n      ],\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: \"anchor\",\n          },\n        },\n      ],\n    ],\n  },\n});\n"],
  "mappings": "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",
  "names": []
}
